from PySide2 import QtCore
from PySide2 import QtWidgets
from PySide2 import QtGui
from shiboken2 import wrapInstance
import maya.cmds as cmds
import maya.OpenMayaUI as omui


def maya_main_window():
    main_window_ptr = omui.MQtUtil.mainWindow()
    return wrapInstance(int(main_window_ptr), QtWidgets.QWidget)


class ControllerModifierWindow(QtWidgets.QDialog):
    controller_modifier_window = None

    @classmethod
    def show_dialog(cls):
        if not cls.controller_modifier_window:
            cls.controller_modifier_window = ControllerModifierWindow()

        if cls.controller_modifier_window.isHidden():
            cls.controller_modifier_window.show()
        else:
            cls.controller_modifier_window.raise_()
            cls.controller_modifier_window.activateWindow()

    def __init__(self, parent=maya_main_window()):
        super(ControllerModifierWindow, self).__init__(parent)

        self.setWindowTitle('Controller Modifier')
        self.setWindowFlag(QtCore.Qt.WindowContextHelpButtonHint, False)
        self.setWindowFlag(QtCore.Qt.WindowMinimizeButtonHint)
        # self.setWindowFlags(self.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)

        self.create_widgets()
        self.create_layout()
        self.create_connections()

    def create_widgets(self):
        self.frame1 = QtWidgets.QFrame()
        self.frame1.setFrameStyle(QtWidgets.QFrame.Panel | QtWidgets.QFrame.Sunken)
        self.frame1.setLayout(QtWidgets.QVBoxLayout())

        self.frame2 = QtWidgets.QFrame()
        self.frame2.setFrameStyle(QtWidgets.QFrame.Panel | QtWidgets.QFrame.Sunken)
        self.frame2.setLayout(QtWidgets.QVBoxLayout())

        self.shape_combobox = QtWidgets.QComboBox()
        self.shape_combobox.setMinimumWidth(200)
        self.shape_combobox.addItems(["Diamond", "Arrow", "Square", "Circle", "Gear", "Pin", "Cube", "Pointy", "V"])

        self.color_picker_btn = QtWidgets.QPushButton("Controller Color")
        self.outliner_color_btn = QtWidgets.QPushButton("Outliner Color")
        self.turn_off_outliner_color_btn = QtWidgets.QPushButton(" Turn Off Outliner Color")

        self.apply_btn = QtWidgets.QPushButton("Apply Shape")
        self.close_btn = QtWidgets.QPushButton("Close")

    ####################################################################################################

    def create_layout(self):

        outliner_layout = QtWidgets.QHBoxLayout()
        outliner_layout.addWidget(self.outliner_color_btn)
        outliner_layout.addWidget(self.turn_off_outliner_color_btn)

        combobox_layout = QtWidgets.QFormLayout()
        combobox_layout.addRow('Shape:', self.shape_combobox)
        ####################################################################################################
        self.frame1.layout().addLayout(combobox_layout)
        self.frame1.layout().addWidget(self.apply_btn, alignment=QtCore.Qt.AlignBottom | QtCore.Qt.AlignRight)
        # self.frame1.layout().addStretch()
        self.frame2.layout().addLayout(outliner_layout)
        self.frame2.layout().addWidget(self.color_picker_btn)

        main_layout = QtWidgets.QVBoxLayout(self)
        main_layout.addWidget(self.frame1)
        main_layout.addWidget(self.frame2)
        main_layout.addWidget(self.close_btn)

    def create_connections(self):
        self.apply_btn.clicked.connect(self.apply_shape_change)
        self.close_btn.clicked.connect(self.close)
        self.color_picker_btn.clicked.connect(self.color_picker_window)
        self.outliner_color_btn.clicked.connect(self.outliner_color_window)
        self.turn_off_outliner_color_btn.clicked.connect(self.turn_off_outliner_color)

    def undo_chunk_decorator(func):
        def wrapper(*args, **kwargs):
            # Start the undo chunk
            cmds.undoInfo(openChunk=True)
            try:
                # Call the original function
                result = func(*args, **kwargs)
            finally:
                # End the undo chunk
                cmds.undoInfo(closeChunk=True)
            return result
        return wrapper

    @undo_chunk_decorator
    def apply_shape_change(self):
        target_shape = self.shape_combobox.currentText()
        sel = cmds.ls(sl=True)
        for sel_ctrl in sel:

            re_crv = cmds.closeCurve(sel_ctrl, ch=False, rpo=True)
            re_crv = cmds.rebuildCurve(sel_ctrl, d=1, spans=len(shape_lib[f"{target_shape}"]) - 1, ch=False)
            re_cvs = cmds.ls(re_crv[0] + ".cv[:]", fl=True)

            re_cv_location_list = []
            for re_cv in re_cvs:
                ind = re_cvs.index(re_cv)
                cmds.xform(re_cv, os=True, t=shape_lib[f"{target_shape}"][ind])

    def color_picker_window(self):
        open_color_picker_window = ColorPicker()
        open_color_picker_window.show()

    def outliner_color_window(self):
        open_outliner_color_window = OutlinerColorPicker()
        open_outliner_color_window.show()

    def turn_off_outliner_color(self):
        sel_objs = cmds.ls(sl=True)
        for sel_obj in sel_objs:
            cmds.setAttr(sel_obj + ".useOutlinerColor", 0)
        cmds.select(cl=True)


class ColorPicker(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.open_color_dialog()

    def open_color_dialog(self):
        color = QtWidgets.QColorDialog.getColor()
        if color.isValid():
            color_rgb = color.getRgbF()[:-1]  # Get RGB values as floats
            self.change_control_curve_color(color_rgb)

    def change_control_curve_color(self, color_rgb):

        selected_objects = cmds.ls(sl=True)  # Get selected objects
        for obj in selected_objects:
            shapes = cmds.listRelatives(obj, shapes=True, type="nurbsCurve")
            if shapes:
                for shape in shapes:
                    print(shape)
                    cmds.setAttr(shape + ".overrideEnabled", 1)
                    cmds.setAttr(shape + ".overrideRGBColors", 1)
                    cmds.setAttr(shape + ".overrideColorRGB", *color_rgb)
        cmds.select(cl=True)


class OutlinerColorPicker(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.open_color_dialog()

    def open_color_dialog(self):
        color = QtWidgets.QColorDialog.getColor()
        if color.isValid():
            color_rgb = color.getRgbF()[:-1]  # Get RGB values as floats
            self.change_control_curve_color(color_rgb)

    def change_control_curve_color(self, color_rgb):

        selected_objects = cmds.ls(sl=True)  # Get selected objects
        for obj in selected_objects:
            if obj:
                cmds.setAttr(obj + ".useOutlinerColor", 1)
                cmds.setAttr(obj + ".outlinerColor", *color_rgb)
        cmds.select(cl=True)


if __name__ == '__main__':
    try:
        controller_modifier_window.close()
        controller_modifier_window.deleteLater()
    except:
        pass

    controller_modifier_window = ControllerModifierWindow()
    controller_modifier_window.show()

shape_lib = {
    "Diamond": [
        (-1, 0, 0),
        (0, 1, 0),
        (1, 0, 0),
        (0, -1, 0),
        (-1, 0, 0),
        (0, 0, 1),
        (1, 0, 0),
        (0, 0, -1),
        (0, 1, 0),
        (0, 0, 1),
        (0, -1, 0),
        (0, 0, -1),
        (-1, 0, 0),
    ],
    "Arrow": [
        (0.0, 0.0, 5.0),
        (2.0, 0.0, 3.0),
        (1.0, 0.0, 3.0),
        (1.0, 0.0, 1.0),
        (3.0, 0.0, 1.0),
        (3.0, 0.0, 2.0),
        (5.0, 0.0, 0.0),
        (3.0, 0.0, -2.0),
        (3.0, 0.0, -1.0),
        (1.0, 0.0, -1.0),
        (1.0, 0.0, -3.0),
        (2.0, 0.0, -3.0),
        (0.0, 0.0, -5.0),
        (-2.0, 0.0, -3.0),
        (-1.0, 0.0, -3.0),
        (-1.0, 0.0, -1.0),
        (-3.0, 0.0, -1.0),
        (-3.0, 0.0, -2.0),
        (-5.0, 0.0, 0.0),
        (-3.0, 0.0, 2.0),
        (-3.0, 0.0, 1.0),
        (-1.0, 0.0, 1.0),
        (-1.0, 0.0, 3.0),
        (-2.0, 0.0, 3.0),
        (0.0, 0.0, 5.0),
    ],
    "Square": [
        (1.0, 0.0, 1.0),
        (-1.0, 0.0, 1.0),
        (-1.0, 0.0, -1.0),
        (1.0, 0.0, -1.0),
        (1.0, 0.0, 1.0),
    ],
    "Circle": [
        (1.0, 0.0, 0.0),
        (0.707, 0.0, 0.707),
        (0.0, 0.0, 1.0),
        (-0.707, 0.0, 0.707),
        (-1.0, 0.0, 0.0),
        (-0.707, 0.0, -0.707),
        (0.0, 0.0, -1.0),
        (0.707, 0.0, -0.707),
        (1.0, 0.0, 0.0)
    ],
    "Gear": [
        (0.9510571360588074, 0.0, -0.3090171813964844),
        (0.809017539024353, 0.0, -0.5877856016159058),
        (0.9687952995300293, 0.0, -0.747563362121582),
        (0.747563362121582, 0.0, -0.9687952399253845),
        (0.5877856016159058, 0.0, -0.8090174794197083),
        (0.309017151594162, 0.0, -0.9510570168495178),
        (0.34436503052711487, 0.0, -1.1742349863052368),
        (0.03534787893295288, 0.0, -1.2231783866882324),
        (0.0, 0.0, -1.0000004768371582),
        (-0.309017151594162, 0.0, -0.951056957244873),
        (-0.41160085797309875, 0.0, -1.152388572692871),
        (-0.6903691291809082, 0.0, -1.010348916053772),
        (-0.5877854824066162, 0.0, -0.8090173006057739),
        (-0.8090172410011292, 0.0, -0.5877854228019714),
        (-1.010348916053772, 0.0, -0.6903690695762634),
        (-1.1523884534835815, 0.0, -0.41160064935684204),
        (-0.9510567784309387, 0.0, -0.3090170621871948),
        (-1.000000238418579, 0.0, 0.0),
        (-1.2231781482696533, 0.0, 0.03534788265824318),
        (-1.1742346286773682, 0.0, 0.3443649411201477),
        (-0.9510567784309387, 0.0, 0.3090170621871948),
        (-0.8090171813964844, 0.0, 0.5877853631973267),
        (-0.9687949419021606, 0.0, 0.7475631237030029),
        (-0.7475631237030029, 0.0, 0.9687948822975159),
        (-0.5877853631973267, 0.0, 0.8090171217918396),
        (-0.3090170621871948, 0.0, 0.9510566592216492),
        (-0.3443649411201477, 0.0, 1.1742346286773682),
        (-0.035347919911146164, 0.0, 1.2231780290603638),
        (-2.9802322387695312e-08, 0.0, 1.0000001192092896),
        (0.30901697278022766, 0.0, 0.9510565996170044),
        (0.41160061955451965, 0.0, 1.1523882150650024),
        (0.6903688907623291, 0.0, 1.0103487968444824),
        (0.5877852439880371, 0.0, 0.8090170621871948),
        (0.80901700258255, 0.0, 0.5877853035926819),
        (1.0103486776351929, 0.0, 0.6903689503669739),
        (1.1523882150650024, 0.0, 0.41160064935684204),
        (0.9510565400123596, 0.0, 0.30901700258255005),
        (1.0, 0.0, 0.0),
        (1.2231779098510742, 0.0, -0.03534745052456856),
        (1.1742351055145264, 0.0, -0.34436464309692383),
        (0.9510571360588074, 0.0, -0.3090171813964844),
    ],
    "Pin": [
        (0.0, 0.0, 1.0),
        (1.0, 0.0, 0.0),
        (0.0, 0.0, -1.0),
        (-1.0, 0.0, 0.0),
        (0.0, 2.0, 0.0),
        (1.0, 0.0, 0.0),
        (0.0, 0.0, -1.0),
        (0.0, 2.0, 0.0),
        (0.0, 0.0, 1.0),
        (-1.0, 0.0, 0.0),
    ],
    "Cube": [
        (1.0, -1.0, 1.0),
        (1.0, -1.0, -1.0),
        (1.0, 1.0, -1.0),
        (1.0, 1.0, 1.0),
        (1.0, -1.0, 1.0),
        (-1.0, -1.0, 1.0),
        (-1.0, -1.0, -1.0),
        (1.0, -1.0, -1.0),
        (1.0, 1.0, -1.0),
        (-1.0, 1.0, -1.0),
        (-1.0, -1.0, -1.0),
        (-1.0, -1.0, 1.0),
        (-1.0, 1.0, 1.0),
        (1.0, 1.0, 1.0),
        (-1.0, 1.0, 1.0),
        (-1.0, 1.0, -1.0),
    ],
    "Pointy": [
        (0.0, -4.0, -1.8645182847976685),
        (-2.0, -4.0, 1.1354817152023315),
        (2.0, -4.0, 1.1354817152023315),
        (0.0, -4.0, -1.8645182847976685),
        (0.0, -4.0, 9.504675269056406e-09),
        (0.0, 0.0, 2.032662926865214e-08),
    ],
    "V": [(-1.0454726196971416, 12.309649944305418, 2.4999999999999996), (-6.075297070309209, 12.309649944305418, 2.4999999999999996), (-6.075297070309209, 11.701403141021727, 2.4999999999999996), (-5.9526654645946495, 11.689298152923582, 2.4999999999999996), (-5.824770724042939, 11.67035150527954, 2.4999999999999996), (-5.691612822577047, 11.644386768341063, 2.4999999999999996), (-5.55284088627963, 11.611404895782469, 2.4999999999999996), (-5.4147707201686375, 11.570527553558348, 2.4999999999999996), (-5.28301632182269, 11.52035093307495, 2.4999999999999996), (-5.157753167316007, 11.46122884750366, 2.4999999999999996), (-5.038981256648587, 11.392982959747313, 2.4999999999999996), (-4.904595253631162, 11.301755428314207, 2.4999999999999996), (-4.784068939849424, 11.207720279693602, 2.4999999999999996), (-4.677577612563657, 11.111052989959715, 2.4999999999999996), (-4.584946153327512, 11.01175546646118, 2.4999999999999996), (-4.503542540236997, 10.907193660736082, 2.4999999999999996), (-4.430735585853147, 10.794386386871336, 2.4999999999999996), (-4.366525051757383, 10.673684597015379, 2.4999999999999996), (-4.310735581084775, 10.544912815093992, 2.4999999999999996), (-4.059156654044675, 9.88052701950073, 2.4999999999999996), (-3.7154724575725075, 8.966492176055906, 2.4999999999999996), (-3.279682872458982, 7.803158283233642, 2.4999999999999996), (-2.7517881371226784, 6.390175819396972, 2.4999999999999996), (-2.1724898792949197, 4.837543964385985, 2.4999999999999996), (-1.5824899651256084, 3.254912376403808, 2.4999999999999996), (-0.9817881561961651, 1.6422808170318601, 2.4999999999999996), (-0.3702092148509503, 0.0, 2.4999999999999996), (0.3406686805042742, 0.0, 2.4999999999999996), (0.9447031043323993, 1.5478947162628172, 2.4999999999999996), (1.5399665854725355, 3.0654387474060054, 2.4999999999999996), (2.126808645561647, 4.552456378936767, 2.4999999999999996), (2.705053808525514, 6.009122848510741, 2.4999999999999996), (3.243124487236452, 7.355263233184814, 2.4999999999999996), (3.7094407103809828, 8.511403560638426, 2.4999999999999996), (4.104001524284791, 9.477544307708738, 2.4999999999999996), (4.42680883629651, 10.25368547439575, 2.4999999999999996), (4.512773039177369, 10.440000057220457, 2.4999999999999996), (4.599264623955201, 10.613509654998778, 2.4999999999999996), (4.686282636955689, 10.774035930633543, 2.4999999999999996), (4.7738261245045175, 10.92175531387329, 2.4999999999999996), (4.8689141295704355, 11.056667804718016, 2.4999999999999996), (4.978388311699342, 11.178772449493406, 2.4999999999999996), (5.102246763542603, 11.288071155548094, 2.4999999999999996), (5.240668775871705, 11.38438558578491, 2.4999999999999996), (5.350492956474732, 11.446316242218016, 2.4999999999999996), (5.474176885918092, 11.503333568572996, 2.4999999999999996), (5.611720564201783, 11.555439472198485, 2.4999999999999996), (5.763299467400025, 11.602807521820067, 2.4999999999999996), (5.915755750969361, 11.642807483673094, 2.4999999999999996), (6.056633474663209, 11.672457218170164, 2.4999999999999996), (6.185580732658814, 11.69193124771118, 2.4999999999999996), (6.3029494307789315, 11.701403141021727, 2.4999999999999996), (6.3029494307789315, 12.309649944305418, 2.4999999999999996), (1.7815451644215103, 12.309649944305418, 2.4999999999999996), (1.7815451644215103, 11.701403141021727, 2.4999999999999996), (1.9308438323292252, 11.687369823455809, 2.4999999999999996), (2.0790896437916273, 11.671403408050535, 2.4999999999999996), (2.226458074882936, 11.653158664703367, 2.4999999999999996), (2.3725981734547132, 11.632807254791258, 2.4999999999999996), (2.5176863692554945, 11.608771800994871, 2.4999999999999996), (2.661720754936647, 11.579298496246336, 2.4999999999999996), (2.8045277617725843, 11.544561862945555, 2.4999999999999996), (2.9464583419117445, 11.504387378692625, 2.4999999999999996), (3.0848784468922132, 11.454737186431883, 2.4999999999999996), (3.2089142821583265, 11.400526523590086, 2.4999999999999996), (3.3183875106129164, 11.34140348434448, 2.4999999999999996), (3.4133000396046156, 11.277369022369383, 2.4999999999999996), (3.490142347649049, 11.207018375396727, 2.4999999999999996), (3.5450539611134047, 11.128422260284422, 2.4999999999999996), (3.578036787346315, 11.042106151580809, 2.4999999999999996), (3.5889143965992445, 10.947544574737547, 2.4999999999999996), (3.5861067794117445, 10.84631586074829, 2.4999999999999996), (3.577159406975221, 10.731229305267332, 2.4999999999999996), (3.5624222777637953, 10.60228109359741, 2.4999999999999996), (3.5418963454517836, 10.459298610687254, 2.4999999999999996), (3.5036511443409437, 10.27929925918579, 2.4999999999999996), (3.4359316848072523, 10.039299488067625, 2.4999999999999996), (3.3387389205250257, 9.739298343658445, 2.4999999999999996), (3.2120718978199476, 9.3792986869812, 2.4999999999999996), (3.03154516442151, 8.891755580902098, 2.4999999999999996), (2.78154516442151, 8.234912395477293, 2.4999999999999996), (2.461896421745729, 7.408596992492675, 2.4999999999999996), (2.07259798271985, 6.412982940673827, 2.4999999999999996), (1.6608433745655533, 5.368772029876708, 2.4999999999999996), (1.2738266013416764, 4.396316051483153, 2.4999999999999996), (0.9113698027882097, 3.4956142902374263, 2.4999999999999996), (0.573475363090944, 2.666666746139526, 2.4999999999999996), (-0.044419763251829274, 4.319474220275878, 2.4999999999999996), (-0.58722638861804, 5.771228313446044, 2.4999999999999996), (-1.0551214195933818, 7.022105693817138, 2.4999999999999996), (-1.448103902503538, 8.072105884552, 2.4999999999999996), (-1.7789812065806863, 8.95526361465454, 2.4999999999999996), (-2.0605599858012673, 9.706140995025633, 2.4999999999999996), (-2.293016193076658, 10.324562549591063, 2.4999999999999996), (-2.476173875495481, 10.810527324676512, 2.4999999999999996), (-2.489507196113157, 10.85228109359741, 2.4999999999999996), (-2.5038933731761452, 10.900351047515867, 2.4999999999999996), (-2.5195076443400857, 10.95508813858032, 2.4999999999999996), (-2.5361740566936013, 11.016140460968016, 2.4999999999999996), (-2.5510861851420876, 11.078245639801024, 2.4999999999999996), (-2.5617880799022195, 11.135965824127195, 2.4999999999999996), (-2.5682795025554177, 11.189474582672117, 2.4999999999999996), (-2.5703845001903054, 11.23877191543579, 2.4999999999999996), (-2.542840717002439, 11.349649906158445, 2.4999999999999996), (-2.4600336529460427, 11.442281246185301, 2.4999999999999996), (-2.322139022513914, 11.516667842864988, 2.4999999999999996), (-2.1291565872874734, 11.572807788848875, 2.4999999999999996), (-1.895998475715208, 11.616317272186278, 2.4999999999999996), (-1.6375775315013408, 11.652105808258055, 2.4999999999999996), (-1.3540687538829326, 11.680527210235594, 2.4999999999999996)]

}
